// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field int len, max_len;
    field Array str_array;
    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        let max_len = maxLength;
		let len = 0;
		let str_array = null ;
		if (max_len > 0)
		{
			let str_array = Array.new(maxLength);
		}
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
		if (~(str_array = null))
		{
			do str_array.dispose();
		}
		let str_array = null;
		let len = 0;
		let max_len =0;
		return;
    }

    /** Returns the current length of this string. */   
    method int length() {
        return len;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
		if ((j < len) & (j > -1))
		{
			return str_array[j];
		}
		else
		{
			do Sys.error(1); // throw an error
			return 48;
		}
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
 		if ( (j > -1) & (j < max_len))
		{
			let str_array[j] = c;
		}
		return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
		if (len < max_len )
		{
			let str_array[len] = c;
			let len = len + 1;
		}
		return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (len > 0)
        {
     		let len = len -1;
        }
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        // Pseudocode:
        // 1. let val = 0
        // 2. for (i = 0 .. str.length()) do
        // 3.   let d = integer value of str.charAt(i)
        // 4.   let val = (val*10) + d
        // 5. return val
	    var int val , i, temp , d;
        var bool is_neg;

		let val = 0;
		let  i = 0;
		let  temp = 0;
        let is_neg = false;

        if(str_array[i] = 45 ){
            let i = i + 1;
            let is_neg = true;
        }
		
		while (i < len)
		{
			let temp = str_array[i];
			if ((temp > 47) & (temp < 58))
				{	
					let d = temp - 48;
					let val = (val*10) + d;    
                    let i = i + 1;
				}
			
			if ((temp > 57) | (temp < 48))
			{
				let i = len;
			}			
		}
        if(is_neg){
            let val = -(val);
        }

        return val ;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        // Pseudocode:
        // 1. let lastDigit = val % 10
        // 2. let c = character representing lastDigit
        // 3. if (val < 10)
        // 4.   return c (as a string)
        // 5. else
        // 6.   return int2String(val / 10).appendChar(c)

        var int lastDigit;
        var int value;
 
        let value = val;
        let len = 0;

        if (val < 0){
            let value = -(val);
            do appendChar(45);
        }
        do int2String(value);
				
        return;
    }

 
	method String int2String(int val)
	{
       // Pseudocode:
        // 1. let lastDigit = val % 10
        // 2. let c = character representing lastDigit
        // 3. if (val < 10)
        // 4.   return c (as a string)
        // 5. else
        // 6.   return int2String(val / 10).appendChar(c)
		
		var int lastDigit,c;
        let lastDigit = (val  - ((val / 10) * 10)) ;  // val mod 10
        let c =lastDigit + 48;   // adding ascii value of the digit 0
        if (val < 10)
		{
		   do appendChar(c);
		   return this;
		}
        else
		{
			do int2String(val / 10);
			do appendChar(c);
		}	
		return this;		
	}	

 /*
	function int calc_mod_10(int val)
	{
        var int x ,y , m;
        let x = val / 10 ;
        let y = x * 10 ;
        let m = val - y ;
        return m;

       let m = (val  - ((val / 10) * 10)) ;
	}
*/
	
    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}

