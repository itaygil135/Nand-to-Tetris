// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

    static Array bit_check_array;
        /** Initializes the library. */
        function void init() {
		let bit_check_array = Array.new(16);
		let bit_check_array[0] = 1;
		let bit_check_array[1] = 2;
		let bit_check_array[2] = 4;
		let bit_check_array[3] = 8;
		let bit_check_array[4] = 16;
		let bit_check_array[5] = 32;
		let bit_check_array[6] = 64;
		let bit_check_array[7] = 128;
		let bit_check_array[8] = 256;
		let bit_check_array[9] = 512;
		let bit_check_array[10] = 1024;
		let bit_check_array[11] = 2048;
		let bit_check_array[12] = 4096;
		let bit_check_array[13] = 8192;
		let bit_check_array[14] = 16384;
		let bit_check_array[15] = ^16384;
		return;
        }
		
		function int bit(int number, int index){
		  return (~(((bit_check_array[index])&(number)) = 0));
		}
		
	
		/** Returns the integer part of the square root of x. */
        function int sqrt(int x) {
            // This should be implemented without using multiplication or division.
            // Pseudocode (where '**' is the mathematical power function):
            // 1. let y = 0
            // 2. for j = (n/2 - 1) ... 0 do
            // 3.   if ((y + 2**j)**2 <= x) then let y = y + 2**j
            // 4. return y
			
			var int y, j ,temp;
			let y = 0 ;
			let j = 7 ; // (n/2 - 1)  , when n == 16
			while (j > -1)
			{
				let temp = Math.multiply((y + bit_check_array[j]),(y + bit_check_array[j]));
				if((~(temp > x)) & (temp > 0)){
					let y = y + bit_check_array[j];
					}

				let j = j - 1 ;

			}
			return y;
        }

		

        /** Returns the absolute value of x. */
        function int abs(int x) {
			if (x < 0) {
				let x = -x ;
			}
			return x;
        }


        /** 
         * Returns the product of x and y. 
         * When a Jack compiler detects the multiplication operator '*' in the 
         * program's code, it handles it by invoking this method. In other words,
         * the Jack expressions x*y and multiply(x,y) return the same value.
         */
        function int multiply(int x, int y) {
            // Pseudocode:
            // 1. let sum = 0
            // 2. let shiftedx = x
            // 3. for i = 0 ... n-1 do
            // 4.   if ((i-th bit of y) == 1)
            // 5.      let sum = sum + shiftedx
            // 6.   let shiftedx = 2*shiftedx
            // 7. return sum
			
			var int sum, shiftedX , i ;
			let sum = 0;
			let shiftedX = x ;
			let i = 0;
			while (i < 16) // at Hack computer' word size is 16 bits
			{
				if (Math.bit(y, i))
				{
					let sum = sum + shiftedX;
				}
				let shiftedX = ^(shiftedX);     
				let i = i +1 ;
			}
			return sum;
        }


        /** 
         * Returns the integer part of x/y.
         * When a Jack compiler detects the multiplication operator '/' in the 
         * program's code, it handles it by invoking this method. In other words,
         * the Jack expressions x/y and divide(x,y) return the same value.
         */
        function int divide(int x, int y) {
            // This should be implemented without using multiplication.
            // Hint: updating the value of 2*q*y in the "if" statement requires
            // at most a single addition operator at every recursion step.
            // Pseudocode:
            // 1. if (y > x) return 0
            // 2. let q = divide(x, 2*y)
            // 3. if ((x - 2*q*y) < y)
            // 4.   return 2*q
            // 5. else
            // 6.   return 2*q + 1
			var int temp;
			var int rv;
			var bool diff_sign;
			var int pos_x , pos_y , q;
			
			if (y = 0)
			{
				do Sys.error(3); // no need to run since Sys.error will halt the program
			}
			if (x = 0 )
			{
				return 0;
			}
			
			let pos_x = Math.abs(x) ;
			let pos_y = Math.abs(y);
			
			// find out if x and y have differnt sign, and set the abs value to pos_x, pos_y. avoid calling abs in order to improve the class efficiancy
			let diff_sign =  false;
			if (x < 0) 
			{ 
				if ( y > 0)
				{
					let diff_sign = true;
				}
			}
			else
			{
				if ( y < 0)
				{
					let diff_sign = true;
				}
			}
			
			// 1. if (y > x) return 0
			if (pos_y > pos_x )
			{
				return 0;
			}
			
            // 2. let q = divide(x, 2*y)
			let q = Math.divide (pos_x, ^(pos_y));
			
            // 3. if ((pos_x - 2 * q * pos_y) < pos_y)
			
			let temp = Math.multiply(q,pos_y);
			let temp = ^(temp);
			if ((pos_x - (temp)) < pos_y)		
			{
				// 4.   return 2*q
				let rv = ^(q);
			}
			// 5. else
			else
			{
				// 6.   return 2*q + 1
				let rv = (^(q)) +1 ;			
			}
			
			if (diff_sign = true)
			{
				let rv = -rv;
			}
			return rv;
        }

    

        /** Returns the greater number. */
        function int max(int a, int b) {
			if (a > b) {
				return a;
			}
			return b;
        }

        /** Returns the smaller number. */
        function int min(int a, int b) {
			if (a < b) {
				return a;
			}
			return b;
        }
}
